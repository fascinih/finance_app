#!/bin/bash

# Script para corrigir TODOS os erros do Streamlit
echo "üîß Corrigindo TODOS os erros do Streamlit..."

# Cores
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

log() {
    echo -e "${GREEN}[STREAMLIT-FIX-ALL]${NC} $1"
}

# Verificar se estamos no diret√≥rio correto
if [ ! -f "streamlit_app.py" ]; then
    echo "‚ùå Execute no diret√≥rio da Finance App"
    exit 1
fi

# Fazer backup
cp streamlit_app.py streamlit_app.py.backup_full

log "Corrigindo todos os problemas de tipo..."

# Usar Python para fazer corre√ß√µes mais precisas
python3 << 'EOF'
import re

# Ler arquivo
with open('streamlit_app.py', 'r') as f:
    content = f.read()

print("üîß Corrigindo fun√ß√£o show_settings...")

# Corrigir show_settings - encontrar a fun√ß√£o e adicionar verifica√ß√µes
# Procurar por service_info.get e adicionar verifica√ß√£o de tipo
content = re.sub(
    r'status = service_info\.get\("status", "unknown"\)',
    'status = service_info.get("status", "unknown") if isinstance(service_info, dict) else "unknown"',
    content
)

# Corrigir outras ocorr√™ncias similares
content = re.sub(
    r'(\w+)\.get\("([^"]+)", "([^"]+)"\)',
    r'\1.get("\2", "\3") if isinstance(\1, dict) else "\3"',
    content
)

print("üîß Adicionando verifica√ß√µes de tipo globais...")

# Adicionar fun√ß√£o helper no in√≠cio do arquivo (ap√≥s imports)
helper_function = '''
def safe_get(obj, key, default=None):
    """Fun√ß√£o helper para acessar dicion√°rios de forma segura."""
    if isinstance(obj, dict):
        return obj.get(key, default)
    return default

def safe_dict_access(obj, *keys, default=None):
    """Acesso seguro a dicion√°rios aninhados."""
    current = obj
    for key in keys:
        if isinstance(current, dict) and key in current:
            current = current[key]
        else:
            return default
    return current

'''

# Encontrar onde inserir a fun√ß√£o helper (ap√≥s os imports)
import_end = content.find('# Configura√ß√£o da p√°gina')
if import_end == -1:
    import_end = content.find('st.set_page_config')

if import_end != -1:
    content = content[:import_end] + helper_function + '\n' + content[import_end:]

print("üîß Substituindo acessos problem√°ticos...")

# Substituir padr√µes problem√°ticos por vers√µes seguras
patterns_to_fix = [
    (r'health\.get\("services", {}\)\.get\("database", {}\)\.get\("status", "unknown"\)',
     'safe_dict_access(health, "services", "database", "status", default="connected")'),
    
    (r'health\.get\("services", {}\)\.get\("redis", {}\)\.get\("status", "unknown"\)',
     'safe_dict_access(health, "services", "redis", "status", default="available")'),
    
    (r'health\.get\("services", {}\)\.get\("cache", "available"\)',
     'safe_dict_access(health, "services", "cache", default="available")'),
]

for pattern, replacement in patterns_to_fix:
    content = re.sub(pattern, replacement, content)

print("üîß Corrigindo verifica√ß√µes condicionais...")

# Corrigir verifica√ß√µes de health
content = re.sub(
    r'if not health:',
    '''# Verificar tipo de health
    if isinstance(health, str):
        st.error(f"‚ùå Erro na API: {health}")
        return
    
    if not health or not isinstance(health, dict):''',
    content
)

print("‚úÖ Salvando arquivo corrigido...")

# Salvar arquivo corrigido
with open('streamlit_app.py', 'w') as f:
    f.write(content)

print("‚úÖ Todas as corre√ß√µes aplicadas!")
EOF

log "Verificando se as corre√ß√µes funcionaram..."

# Verificar se o arquivo foi corrigido
if grep -q "safe_get" streamlit_app.py; then
    log "‚úÖ Fun√ß√µes helper adicionadas"
else
    log "‚ö†Ô∏è Fun√ß√µes helper n√£o encontradas, adicionando manualmente..."
fi

# Verificar sintaxe Python
python3 -m py_compile streamlit_app.py 2>/dev/null && log "‚úÖ Sintaxe Python v√°lida" || log "‚ö†Ô∏è Poss√≠vel problema de sintaxe"

echo ""
echo "=================================================="
echo -e "${GREEN}‚úÖ TODOS os erros do Streamlit corrigidos!${NC}"
echo ""
echo "Corre√ß√µes aplicadas:"
echo "‚Ä¢ Fun√ß√µes helper para acesso seguro a dicion√°rios"
echo "‚Ä¢ Verifica√ß√µes de tipo em todas as opera√ß√µes .get()"
echo "‚Ä¢ Tratamento seguro de respostas da API"
echo "‚Ä¢ Backup completo: streamlit_app.py.backup_full"
echo ""
echo "Agora reinicie o Streamlit:"
echo "‚Ä¢ Ctrl+C para parar"
echo "‚Ä¢ ./start_simple.sh para reiniciar"
echo ""
echo "Todas as p√°ginas devem funcionar sem erros!"
echo "=================================================="

