#!/bin/bash

# Script para corrigir caminhos hardcoded nos scripts
echo "üîß Corrigindo caminhos nos scripts da Finance App..."

# Cores
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

log() {
    echo -e "${GREEN}[FIX-PATHS]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[FIX-PATHS]${NC} $1"
}

# Detectar diret√≥rio atual
CURRENT_DIR=$(pwd)
log "Diret√≥rio atual: $CURRENT_DIR"

# Verificar se estamos no diret√≥rio correto
if [ ! -f "streamlit_app.py" ] || [ ! -d "scripts" ]; then
    echo "‚ùå Execute este script no diret√≥rio raiz da Finance App"
    echo "   (onde est√£o os arquivos streamlit_app.py e pasta scripts/)"
    exit 1
fi

# Lista de scripts para corrigir
SCRIPTS_TO_FIX=(
    "scripts/start_all.sh"
    "scripts/stop_all.sh"
    "scripts/setup_database.sh"
    "scripts/backup_database.sh"
    "scripts/restore_database.sh"
    "scripts/monitor_system.sh"
)

# Corrigir cada script
for script in "${SCRIPTS_TO_FIX[@]}"; do
    if [ -f "$script" ]; then
        log "Corrigindo: $script"
        
        # Fazer backup
        cp "$script" "$script.backup"
        
        # Substituir caminho hardcoded pelo atual
        sed -i "s|/home/ubuntu/finance_app|$CURRENT_DIR|g" "$script"
        
        # Verificar se mudou
        if ! cmp -s "$script" "$script.backup"; then
            log "‚úÖ $script corrigido"
        else
            log "‚ÑπÔ∏è  $script n√£o precisava de corre√ß√£o"
        fi
    else
        warn "‚ùå $script n√£o encontrado"
    fi
done

# Corrigir tamb√©m arquivos de configura√ß√£o se existirem
CONFIG_FILES=(
    ".env"
    ".env.example"
    "docker-compose.yml"
)

for config in "${CONFIG_FILES[@]}"; do
    if [ -f "$config" ]; then
        log "Verificando: $config"
        
        # Fazer backup
        cp "$config" "$config.backup"
        
        # Substituir caminhos
        sed -i "s|/home/ubuntu/finance_app|$CURRENT_DIR|g" "$config"
        
        if ! cmp -s "$config" "$config.backup"; then
            log "‚úÖ $config corrigido"
        else
            log "‚ÑπÔ∏è  $config n√£o precisava de corre√ß√£o"
        fi
    fi
done

# Criar arquivo .env se n√£o existir
if [ ! -f ".env" ] && [ -f ".env.example" ]; then
    log "Criando arquivo .env..."
    cp .env.example .env
    
    # Ajustar caminhos no .env
    sed -i "s|/home/ubuntu/finance_app|$CURRENT_DIR|g" .env
    log "‚úÖ Arquivo .env criado"
fi

# Verificar se Python virtual environment existe
if [ ! -d "venv" ]; then
    log "Criando ambiente virtual Python..."
    python3 -m venv venv
    log "‚úÖ Ambiente virtual criado"
fi

# Ativar venv e instalar depend√™ncias se necess√°rio
if [ -f "requirements.txt" ]; then
    log "Verificando depend√™ncias Python..."
    source venv/bin/activate
    
    # Verificar se precisa instalar
    if ! pip list | grep -q "streamlit"; then
        log "Instalando depend√™ncias..."
        pip install -r requirements.txt
        log "‚úÖ Depend√™ncias instaladas"
    else
        log "‚ÑπÔ∏è  Depend√™ncias j√° instaladas"
    fi
    
    deactivate
fi

# Tornar scripts execut√°veis
log "Ajustando permiss√µes..."
chmod +x scripts/*.sh
chmod +x *.sh 2>/dev/null || true

echo ""
echo "=================================================="
echo -e "${GREEN}‚úÖ Caminhos corrigidos com sucesso!${NC}"
echo ""
echo "Configura√ß√µes atualizadas:"
echo "‚Ä¢ Diret√≥rio base: $CURRENT_DIR"
echo "‚Ä¢ Scripts corrigidos: ${#SCRIPTS_TO_FIX[@]}"
echo "‚Ä¢ Ambiente virtual: $([ -d "venv" ] && echo "‚úÖ Criado" || echo "‚ùå N√£o encontrado")"
echo "‚Ä¢ Depend√™ncias: $([ -f "venv/bin/activate" ] && echo "‚úÖ Instaladas" || echo "‚ùå N√£o instaladas")"
echo ""
echo "Agora voc√™ pode executar:"
echo "‚Ä¢ ./scripts/start_all.sh     # Iniciar aplica√ß√£o"
echo "‚Ä¢ ./scripts/setup_database.sh # Configurar banco"
echo "‚Ä¢ ./scripts/monitor_system.sh # Monitorar sistema"
echo "=================================================="

